// Generated by CoffeeScript 1.10.0

/*
  @author Gilles Gerlinger
  Copyright 2016. All rights reserved.
 */

(function() {
  var Promise, Remote, fetch, log, send, sse, tag;

  if (typeof window === 'object') {
    fetch = window.fetch || require('./fetch');
    Promise = window.Promise || require('./promise');
  }

  log = require('./log');

  tag = 'rpc';

  sse = '__sse';

  exports.Remote = Remote = (function() {
    function Remote(options) {
      var ctx, fn, i, len, method, ref;
      ctx = {
        count: 0,
        uid: Math.random().toString().substring(2, 10),
        request: (options.url || location.origin) + "/" + options["class"]
      };
      options.methods = options.methods || [];
      options.methods.push(sse);
      ref = options.methods;
      fn = (function(_this) {
        return function(method) {
          return _this[method] = function() {
            return send(ctx.request, {
              method: method,
              args: [].slice.call(arguments),
              id: ctx.uid + "-" + (++ctx.count)
            });
          };
        };
      })(this);
      for (i = 0, len = ref.length; i < len; i++) {
        method = ref[i];
        fn(method);
      }
    }

    return Remote;

  })();

  send = function(request, msg) {
    log(msg.id + " out", msg);
    return new Promise(function(resolve, reject) {
      return fetch(request, {
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        method: 'post',
        body: JSON.stringify(msg)
      })["catch"](function(err) {
        log(msg.id + ": network error " + err);
        return reject(err);
      }).then(function(response) {
        if (response) {
          return response.json();
        }
      }).then(function(rep) {
        if (rep) {
          log(msg.id + " in", rep);
          if (rep.err) {
            return reject(rep.err);
          } else {
            return resolve(rep.rep);
          }
        }
      });
    });
  };

  exports.expose = function(local, remote) {
    return new Promise(function(resolve, reject) {
      var err, source;
      if (!remote) {
        log(err = 'SSE error: no remote object to create channel');
        reject(err);
      }
      source = new EventSource(tag);
      return source.addEventListener(tag, function(e) {
        var msg;
        log('SSE in', e.data);
        msg = JSON.parse(e.data);
        if (msg.method) {
          return local[msg.method].apply(local, msg.args);
        } else if (msg.uid) {
          remote[sse](msg.uid);
          return resolve(msg.uid);
        }
      }, false);
    });
  };

}).call(this);
