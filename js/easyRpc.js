// Generated by CoffeeScript 1.10.0

/*
  @author Gilles Gerlinger
  Copyright 2016. All rights reserved.
 */

(function() {
  var EventSource, Promise, Remote, cnf, fetch, http, log;

  log = require('./log');

  cnf = require('./config');

  exports.Remote = Remote = (function() {
    var send;

    function Remote(options) {
      var ctx, fn, i, len, method, ref;
      ctx = {
        count: 0,
        uid: Math.random().toString().substring(2, 10),
        request: (options.url || location.origin) + "/" + options["class"]
      };
      options.methods = options.methods || [];
      options.methods.push(cnf.sse);
      ref = options.methods;
      fn = (function(_this) {
        return function(method) {
          return _this[method] = function() {
            return send(ctx.request, {
              method: method,
              args: [].slice.call(arguments),
              id: ctx.uid + "-" + (++ctx.count)
            });
          };
        };
      })(this);
      for (i = 0, len = ref.length; i < len; i++) {
        method = ref[i];
        fn(method);
      }
    }

    send = function(request, msg) {
      log(msg.id + " out", msg);
      return new Promise(function(resolve, reject) {
        return fetch(request, {
          headers: {
            'Content-Type': 'application/json; charset=utf-8'
          },
          method: 'post',
          body: JSON.stringify(msg)
        })["catch"](function(err) {
          log(msg.id + ": network error", err);
          return reject(err);
        }).then(function(response) {
          var error, rep;
          log(msg.id + " in", response.data);
          try {
            rep = JSON.parse(response.data);
            if (rep.err) {
              return reject(rep.err);
            } else {
              return resolve(rep.rep);
            }
          } catch (error) {
            return reject(response.data);
          }
        });
      });
    };

    return Remote;

  })();

  exports.expose = function(local, remote, url) {
    var method, methods, obj;
    local = local || {};
    methods = (function() {
      var results;
      results = [];
      for (method in local) {
        if (method.charAt(0) !== '_') {
          results.push(method);
        }
      }
      return results;
    })();
    remote = remote || (
      obj = {},
      obj["" + cnf.sse] = function() {
        return log("missing remote object in expose");
      },
      obj
    );
    return new Promise(function(resolve, reject) {
      var source;
      source = new EventSource(url ? url + "/" + cnf.tag : cnf.tag);
      return source.addEventListener(cnf.tag, function(e) {
        var msg;
        log('SSE in', e.data);
        msg = JSON.parse(e.data);
        if (msg.method) {
          if (local[msg.method]) {
            return local[msg.method].apply(local, msg.args);
          } else {
            return log('SSE error: no method', msg.method, 'for local object', local);
          }
        } else if (msg.uid) {
          remote[cnf.sse](msg.uid, methods);
          return resolve(source);
        }
      }, false);
    });
  };

  if (typeof window === 'object') {
    fetch = window.fetch || require('./fetch');
    Promise = window.Promise || require('./promise');
    EventSource = window.EventSource;
  } else if (typeof global === 'object') {
    Promise = global.Promise;
    http = require('http');
    EventSource = require('EventSource');
    fetch = function(uri, options) {
      return new Promise(function(resolve, reject) {
        var req, tmp;
        uri = uri.replace(/https?:\/\//, '');
        tmp = uri.split('/');
        options.path = "/" + tmp[1];
        tmp = tmp[0].split(':');
        options.hostname = tmp[0];
        if (tmp[1]) {
          options.port = tmp[1];
        }
        req = http.request(options, function(res) {
          res.setEncoding('utf8');
          return res.on('data', function(body) {
            return resolve({
              data: body
            });
          });
        });
        req.on('error', function(e) {
          return reject(e.message);
        });
        req.write(options.body);
        return req.end();
      });
    };
  }

}).call(this);
