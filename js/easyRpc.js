// Generated by CoffeeScript 1.8.0

/*
  @author Gilles Gerlinger
  Copyright 2016. All rights reserved.
 */

(function() {
  var Remote, log, send;

  module.exports = Remote = (function() {
    function Remote(options) {
      var ctx, method, _fn, _i, _len, _ref;
      ctx = {
        count: 0,
        uid: Math.random().toString().substring(2, 10),
        request: "" + (options.url || location.origin) + "/" + options["class"]
      };
      _ref = options.methods;
      _fn = (function(_this) {
        return function(method) {
          return _this[method] = function() {
            return send(ctx.request, {
              method: method,
              args: [].slice.call(arguments),
              id: "" + ctx.uid + "-" + (++ctx.count)
            });
          };
        };
      })(this);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        method = _ref[_i];
        _fn(method);
      }
    }

    return Remote;

  })();

  send = function(request, msg) {
    var message;
    message = JSON.stringify(msg);
    log("" + msg.id + ": out " + message);
    return new Promise(function(resolve, reject) {
      return fetch(request, {
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        method: 'post',
        body: message
      })["catch"](function(err) {
        log("" + msg.id + ": network error " + err);
        return reject(err);
      }).then(function(response) {
        if (response) {
          return response.json();
        }
      }).then(function(rep) {
        if (rep) {
          log("" + msg.id + ": in " + (JSON.stringify(rep)));
          if (rep.err) {
            return reject(rep.err);
          } else {
            return resolve(rep.rep);
          }
        }
      });
    });
  };

  log = function(text) {
    if (text.length > 127) {
      text = text.substring(0, 127) + ' ...';
    }
    return console.log(new Date().toISOString().replace('T', ' ').slice(0, 19), 'rpc', text);
  };

}).call(this);
