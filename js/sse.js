// Generated by CoffeeScript 1.8.0

/*
  @author Gilles Gerlinger
  Copyright 2016. All rights reserved.
 */

(function() {
  var Promise, Remote, log, send, tag;

  log = require('./log');

  tag = 'rpc';

  if (typeof window === 'object') {
    Promise = window.Promise || require('./promise');
  }

  exports.expose = function(local, remote) {
    return new Promise(function(resolve, reject) {
      var err, source;
      if (!remote) {
        log(err = 'SSE error: no remote object to create channel');
        reject(err);
      }
      source = new EventSource(tag);
      source.addEventListener(tag, (function(e) {
        var msg;
        log('SSE in', e.data);
        msg = JSON.parse(e.data);
        if (msg.method) {
          return local[msg.method].apply(local, msg.args);
        } else if (msg.uid) {
          remote.__sse(msg.uid);
          return resolve(msg.uid);
        }
      }), false);
      return source.addEventListener('error', (function(e) {
        return log('SSE error', e);
      }), false);
    });
  };

  exports.Remote = Remote = (function() {
    function Remote(options) {
      var ctx, method, _fn, _i, _len, _ref;
      ctx = {
        count: 0,
        uid: Math.random().toString().substring(2, 10)
      };
      _ref = options.methods;
      _fn = (function(_this) {
        return function(method) {
          return _this[method] = function() {
            return send(options.channel, {
              method: method,
              args: [].slice.call(arguments),
              id: "" + ctx.uid + "-" + (++ctx.count)
            });
          };
        };
      })(this);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        method = _ref[_i];
        _fn(method);
      }
    }

    return Remote;

  })();

  send = function(channel, msg) {
    log("" + msg.id + " out " + channel.__uid, msg);
    return channel.json(msg);
  };

}).call(this);
