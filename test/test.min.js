(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.LS = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
exports.Remote = require('./js/easyRpc');
exports.Server = require('./js/rpc');

exports.expose = require('./js/sse').expose;
exports.sseRemote = require('./js/sse').Remote;

exports.log = require('./js/log');

// for browser compatibility
exports.Promise = require('./js/promise');
exports.fetch = require('./js/fetch');

},{"./js/easyRpc":2,"./js/fetch":3,"./js/log":4,"./js/promise":5,"./js/rpc":8,"./js/sse":6}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0

/*
  @author Gilles Gerlinger
  Copyright 2016. All rights reserved.
 */

(function() {
  var Promise, Remote, fetch, log, send;

  log = require('./log');

  if (typeof window === 'object') {
    fetch = window.fetch || require('./fetch');
    Promise = window.Promise || require('./promise');
  }

  module.exports = Remote = (function() {
    function Remote(options) {
      var ctx, method, _fn, _i, _len, _ref;
      ctx = {
        count: 0,
        uid: Math.random().toString().substring(2, 10),
        request: "" + (options.url || location.origin) + "/" + options["class"]
      };
      options.methods = options.methods || [];
      options.methods.push('__sse');
      _ref = options.methods;
      _fn = (function(_this) {
        return function(method) {
          return _this[method] = function() {
            return send(ctx.request, {
              method: method,
              args: [].slice.call(arguments),
              id: "" + ctx.uid + "-" + (++ctx.count)
            });
          };
        };
      })(this);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        method = _ref[_i];
        _fn(method);
      }
    }

    return Remote;

  })();

  send = function(request, msg) {
    log("" + msg.id + " out", msg);
    return new Promise(function(resolve, reject) {
      return fetch(request, {
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        method: 'post',
        body: JSON.stringify(msg)
      })["catch"](function(err) {
        log("" + msg.id + ": network error " + err);
        return reject(err);
      }).then(function(response) {
        if (response) {
          return response.json();
        }
      }).then(function(rep) {
        if (rep) {
          log("" + msg.id + " in", rep);
          if (rep.err) {
            return reject(rep.err);
          } else {
            return resolve(rep.rep);
          }
        }
      });
    });
  };

}).call(this);

},{"./fetch":3,"./log":4,"./promise":5}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0

/*
  @author Gilles Gerlinger
  Copyright 2015. All rights reserved.
 */

(function() {
  var Promise, Response, fetch;

  if (typeof window === 'object') {
    Promise = window.Promise || require('./promise');
  }

  Response = (function() {
    function Response(data) {
      this.data = data;
    }

    Response.prototype.json = function() {
      return JSON.parse(this.data);
    };

    return Response;

  })();

  module.exports = fetch = function(uri, options) {
    return new Promise(function(resolve, reject) {
      var xhr;
      xhr = new XMLHttpRequest();
      xhr.open(options.method, uri, true);
      xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');
      xhr.send(options.body || null);
      xhr.onload = function() {
        return resolve(new Response(xhr.response));
      };
      return xhr.onerror = function() {
        return reject("xhr error: " + xhr.statusText);
      };
    });
  };

}).call(this);

},{"./promise":5}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0

/*
  @author Gilles Gerlinger
  Copyright 2016. All rights reserved.
 */

(function() {
  var __slice = [].slice;

  module.exports = function() {
    var text;
    text = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return console.log.apply(console, [new Date().toLocaleString(), 'rpc'].concat(__slice.call(text)));
  };

}).call(this);

},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0

/*
  @author Gilles Gerlinger
  Copyright 2015. All rights reserved.
 */

(function() {
  var Promise,
    __slice = [].slice;

  module.exports = Promise = (function() {
    Promise.prototype.status = 0;

    function Promise(ready) {
      this._chain = [];
      if (ready) {
        ready((function(_this) {
          return function() {
            return _this.resolve.apply(_this, arguments);
          };
        })(this), (function(_this) {
          return function() {
            return _this.reject.apply(_this, arguments);
          };
        })(this));
      }
    }

    Promise.prototype.then = function(resolve) {
      this._chain.push({
        type: 1,
        func: resolve
      });
      return this;
    };

    Promise.prototype["catch"] = function(reject) {
      this._chain.push({
        type: 2,
        func: reject
      });
      return this;
    };

    Promise.prototype.resolve = function() {
      return this._process.apply(this, [1].concat(__slice.call(arguments)));
    };

    Promise.prototype.reject = function() {
      return this._process.apply(this, [2].concat(__slice.call(arguments)));
    };

    Promise.prototype._process = function() {
      var args, evt, next, rst, type;
      type = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (next = this._chain.shift()) {
        if (next.type === type) {
          try {
            if ((rst = next.func.apply(next, args)) instanceof Promise) {
              this.status = 0;
              return rst.then((function(_this) {
                return function(param) {
                  return _this.resolve(param);
                };
              })(this))["catch"]((function(_this) {
                return function(param) {
                  return _this.reject(param);
                };
              })(this));
            } else {
              this.status = type;
              return this.resolve(rst);
            }
          } catch (_error) {
            evt = _error;
            return this.reject(evt);
          }
        } else if (type === 1) {
          return this.resolve.apply(this, args);
        } else {
          return this.reject.apply(this, args);
        }
      }
    };

    return Promise;

  })();

}).call(this);

},{}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0

/*
  @author Gilles Gerlinger
  Copyright 2016. All rights reserved.
 */

(function() {
  var Promise, Remote, log, send, tag;

  log = require('./log');

  tag = 'rpc';

  if (typeof window === 'object') {
    Promise = window.Promise || require('./promise');
  }

  exports.expose = function(local, remote) {
    return new Promise(function(resolve, reject) {
      var err, source;
      if (!remote) {
        log(err = 'SSE error: no remote object to create channel');
        reject(err);
      }
      source = new EventSource(tag);
      source.addEventListener(tag, (function(e) {
        var msg;
        log('SSE in', e.data);
        msg = JSON.parse(e.data);
        if (msg.method) {
          return local[msg.method].apply(local, msg.args);
        } else if (msg.uid) {
          remote.__sse(msg.uid);
          return resolve(msg.uid);
        }
      }), false);
      return source.addEventListener('error', (function(e) {
        return log('SSE error', e);
      }), false);
    });
  };

  exports.Remote = Remote = (function() {
    function Remote(options) {
      var ctx, method, _fn, _i, _len, _ref;
      ctx = {
        count: 0,
        uid: Math.random().toString().substring(2, 10)
      };
      _ref = options.methods;
      _fn = (function(_this) {
        return function(method) {
          return _this[method] = function() {
            return send(options.channel, {
              method: method,
              args: [].slice.call(arguments),
              id: "" + ctx.uid + "-" + (++ctx.count)
            });
          };
        };
      })(this);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        method = _ref[_i];
        _fn(method);
      }
    }

    return Remote;

  })();

  send = function(channel, msg) {
    log("" + msg.id + " out " + channel.__uid, msg);
    return channel.json(msg);
  };

}).call(this);

},{"./log":4,"./promise":5}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  var Remote, Test, expose, remote,
    __slice = [].slice;

  Remote = require('avs-easyrpc').Remote;

  expose = require('avs-easyrpc').expose;

  module.exports = remote = new Remote({
    "class": 'Employee',
    methods: ['getProfile', 'speak']
  });


  /*
  remote.getProfile 'john'
  .then (rep) -> console.log rep
  .catch (err) -> console.log err
  
  remote.publish()
  .then (rep) -> console.log rep
  .catch (err) -> console.log err
   */

  Test = (function() {
    function Test() {}

    Test.prototype.echo = function() {
      var text, user;
      user = arguments[0], text = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      console.log.apply(console, ["" + user + ":"].concat(__slice.call(text)));
      return $('#messages').append($('<li>').text("" + user + ":" + text[0]));
    };

    return Test;

  })();

  expose(new Test(), remote).then(function() {
    return remote.speak('hello');
  });

  remote.prespeak = function() {
    remote.speak($('#m').val());
    return $('#m').val('');
  };

}).call(this);

},{"avs-easyrpc":1}],8:[function(require,module,exports){

},{}]},{},[7])(7)
});