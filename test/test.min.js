(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.LS = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
exports.Remote = require('./js/easyRpc').Remote;
exports.expose = require('./js/easyRpc').expose;

exports.Server = require('./js/rpc');

exports.log = require('./js/log');

// for browser compatibility
exports.Promise = require('./js/promise');
exports.fetch = require('./js/fetch');

},{"./js/easyRpc":2,"./js/fetch":3,"./js/log":4,"./js/promise":6,"./js/rpc":6}],2:[function(require,module,exports){
(function (global){
// Generated by CoffeeScript 1.10.0

/*
  @author Gilles Gerlinger
  Copyright 2016. All rights reserved.
 */

(function() {
  var EventSource, Promise, Remote, Response, fetch, log, send, sse, tag;

  log = require('./log');

  tag = 'rpc';

  sse = '_remoteReady';

  exports.Remote = Remote = (function() {
    function Remote(options) {
      var ctx, fn, i, len, method, ref;
      ctx = {
        count: 0,
        uid: Math.random().toString().substring(2, 10),
        request: (options.url || location.origin) + "/" + options["class"]
      };
      options.methods = options.methods || [];
      options.methods.push(sse);
      ref = options.methods;
      fn = (function(_this) {
        return function(method) {
          return _this[method] = function() {
            return send(ctx.request, {
              method: method,
              args: [].slice.call(arguments),
              id: ctx.uid + "-" + (++ctx.count)
            });
          };
        };
      })(this);
      for (i = 0, len = ref.length; i < len; i++) {
        method = ref[i];
        fn(method);
      }
    }

    return Remote;

  })();

  send = function(request, msg) {
    log(msg.id + " out", msg);
    return new Promise(function(resolve, reject) {
      return fetch(request, {
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        method: 'post',
        body: JSON.stringify(msg)
      })["catch"](function(err) {
        log(msg.id + ": network error " + err);
        return reject(err);
      }).then(function(response) {
        if (response) {
          return response.json();
        }
      }).then(function(rep) {
        if (rep) {
          log(msg.id + " in", rep);
          if (rep.err) {
            return reject(rep.err);
          } else {
            return resolve(rep.rep);
          }
        }
      });
    });
  };

  exports.expose = function(local, remote, url) {
    var method, methods, obj;
    local = local || {};
    methods = (function() {
      var results;
      results = [];
      for (method in local) {
        if (method.charAt(0) !== '_') {
          results.push(method);
        }
      }
      return results;
    })();
    remote = remote || (
      obj = {},
      obj["" + sse] = function() {
        return log("missing remote object in expose");
      },
      obj
    );
    return new Promise(function(resolve, reject) {
      var source;
      source = new EventSource(url ? url + "/" + tag : tag);
      return source.addEventListener(tag, function(e) {
        var msg;
        log('SSE in', e.data);
        msg = JSON.parse(e.data);
        if (msg.method) {
          if (local[msg.method]) {
            return local[msg.method].apply(local, msg.args);
          } else {
            return log('SSE error: no method', msg.method, 'for local object', local);
          }
        } else if (msg.uid) {
          remote[sse](msg.uid, methods);
          return resolve(source);
        }
      }, false);
    });
  };

  if (typeof window === 'object') {
    fetch = window.fetch || require('./fetch');
    Promise = window.Promise || require('./promise');
    EventSource = window.EventSource;
  } else if (typeof global === 'object') {
    Promise = global.Promise;
    EventSource = require('EventSource');
    fetch = function(uri, options) {
      return new Promise(function(resolve, reject) {
        var req, tmp;
        uri = uri.replace(/https?:\/\//, '');
        tmp = uri.split('/');
        options.path = "/" + tmp[1];
        tmp = tmp[0].split(':');
        options.hostname = tmp[0];
        if (tmp[1]) {
          options.port = tmp[1];
        }
        req = http.request(options, function(res) {
          res.setEncoding('utf8');
          return res.on('data', function(body) {
            return resolve(new Response(body));
          });
        });
        req.on('error', function(e) {
          return reject(e.message);
        });
        req.write(options.body);
        return req.end();
      });
    };
    Response = (function() {
      function Response(data) {
        this.data = data;
      }

      Response.prototype.json = function() {
        return JSON.parse(this.data);
      };

      return Response;

    })();
  }

}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./fetch":3,"./log":4,"./promise":6,"EventSource":undefined}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0

/*
  @author Gilles Gerlinger
  Copyright 2015. All rights reserved.
 */

(function() {
  var Promise, Response, fetch;

  if (typeof window === 'object') {
    Promise = window.Promise || require('./promise');
  }

  Response = (function() {
    function Response(data) {
      this.data = data;
    }

    Response.prototype.json = function() {
      return JSON.parse(this.data);
    };

    return Response;

  })();

  module.exports = fetch = function(uri, options) {
    return new Promise(function(resolve, reject) {
      var xhr;
      xhr = new XMLHttpRequest();
      xhr.open(options.method, uri, true);
      xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');
      xhr.send(options.body || null);
      xhr.onload = function() {
        return resolve(new Response(xhr.response));
      };
      return xhr.onerror = function() {
        return reject("xhr error: " + xhr.statusText);
      };
    });
  };

}).call(this);

},{"./promise":6}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0

/*
  @author Gilles Gerlinger
  Copyright 2016. All rights reserved.
 */

(function() {
  var slice = [].slice;

  module.exports = function() {
    var text;
    text = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return console.log.apply(console, [new Date().toLocaleString(), '|'].concat(slice.call(text)));
  };

}).call(this);

},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Deux, Remote, Test, expose, remote, src,
    slice = [].slice;

  Remote = require('avs-easyrpc').Remote;

  expose = require('avs-easyrpc').expose;

  module.exports = remote = new Remote({
    "class": 'Employee',
    methods: ['getProfile', 'speak']
  });

  Test = (function() {
    function Test() {}

    Test.prototype.echo = function() {
      var text, user;
      user = arguments[0], text = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      console.log.apply(console, [user + ":"].concat(slice.call(text)));
      return $('#messages').append($('<li>').text(user + ":" + text[0]));
    };

    return Test;

  })();

  expose(new Test(), remote).then(function() {
    return remote.speak('hello');
  });

  remote.prespeak = function() {
    remote.speak($('#m').val());
    return $('#m').val('');
  };

  src = null;

  Deux = (function() {
    function Deux() {}

    Deux.prototype.test = function(msg) {
      console.log('deux: ', msg);
      return src.close();
    };

    return Deux;

  })();

  expose(new Deux(), new Remote({
    "class": 'Customer'
  })).then(function(source) {
    return src = source;
  });


  /*
  remote.getProfile 'john'
  .then (rep) -> console.log rep
  .catch (err) -> console.log err
  
  remote.publish()
  .then (rep) -> console.log rep
  .catch (err) -> console.log err
   */

}).call(this);

},{"avs-easyrpc":1}],6:[function(require,module,exports){

},{}]},{},[5])(5)
});